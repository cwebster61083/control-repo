pipeline {
    agent { node { label 'ruby' } }
    stages{
        stage('Checkout') {
            steps {
                    git branch: '${BRANCH_NAME}', credentialsId: '28c89081-aea2-4473-9822-e704a7bb5725', url: 'git@ssh.dev.azure.com:v3/dartcontainer/Web%20Administration/puppet-dp3'
            }
        }
        stage('Set Version') {
            when {
                anyOf {
                    branch 'development'
                    branch 'qa'
                }
            }
            steps {
                sh label: 'Change version', script: "sed -ie '/\\\"version\\\"/s/[0-9]*\\.[0-9]*\\.[0-9]*/&-$BRANCH_NAME/' metadata.json"
            }
        }
        stage('Module Testing') {
            parallel {
                stage('Run Syntax Validation Tests') {
                    steps {
                            sh '''#!/bin/bash
                                  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
    
                                  rvm use $ruby@$$ --create
                                  clean_up () {
                                     ARG=$?
                                     rvm --force gemset delete $$
                                     exit $ARG
                                  }
                                  trap clean_up ERR

                                  gem install bundler
  
                                  echo -e "\n\t### Install Gems ###\n"
                                  rm -f Gemfile.lock
                                  pdk bundle
 
                                  echo -e "\n\t### Begin tests ###\n"
                                  pdk validate

                                  clean_up'''
                    }
                }
                stage('Run Unit Tests') {
                    steps {
                            sh '''#!/bin/bash
                                  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

                                  rvm use $ruby@$$ --create
                                  clean_up () {
                                     ARG=$?
                                     rvm --force gemset delete $$
                                     exit $ARG
                                  }
                                  trap clean_up ERR

                                  gem install bundler

                                  echo -e "\n\t### Install Gems ###\n"
                                  rm -f Gemfile.lock
                                  bundle install

                                  echo -e "\n\t### Begin tests ###\n"
                                  bundle exec rake spec
                                  clean_up'''
                    }
                }
                stage('Run Integration (Acceptance) Tests'){
                    steps {
                        //Working the politics
                        //pdk bundle exec rake beaker_roles:all_roles
                        sleep 1
                    }
                }
            }
        }
        stage('Build Artifacts'){
            steps {
                // Delete any existing builds and create another
                sh '''#!/bin/bash

                      [ -e Gemfile.lock ] && rm -f Gemfile.lock
                      [ -e pkg ] && rm -rf pkg
                      pdk build'''
            }
        }
        stage('Archive Artifacts'){
            parallel {
                stage('Archive locally') {
                    when {
                        not {
                            anyOf {
                                branch 'master';
                                branch 'qa';
                                branch 'development'
                            }
                        }
                    }
                    steps {
                        archiveArtifacts artifacts: 'pkg/*', onlyIfSuccessful: true
                    }
                }
                stage('Deploy Code to Artifactory'){
                    when {
                        anyOf {
                            branch 'master';
                            branch 'qa';
                            branch 'development'
                        }
                    }
                    steps {
                        script {
                            def server = Artifactory.server 'artifactory'
                            def uploadSpec = """{
                                "files": [
                                    {
                                        "pattern": "pkg/*",
                                        "target": "local-puppet/dart/dp3/"
                                    }
                                ]
                            }"""
                            def buildInfo = Artifactory.newBuildInfo()
                            server.upload spec: uploadSpec, buildInfo: buildInfo
                            server.publishBuildInfo buildInfo
                        }
                    }
                } 
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}